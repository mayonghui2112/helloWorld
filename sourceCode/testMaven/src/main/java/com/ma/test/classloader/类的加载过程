加载-->验证-->准备-->解析-->初始化
加载：通过完全限定名找到类-->根据流生成方法区的运行时数据结构-->在堆中生成一个Class对象
验证：文件格式验证-->语义验证-->字节码验证，比如类型检查-->符号引用检查，比如是否能根据完全限定名找到类
准备：为类静态变量分配内存并设置类变量的初始值，final static则直接赋予原值
解析：类或接口的解析，处理NameAndType-->字段解析，递归解析CONSTANT_class_info-->类方法解析，递归查找Method-->接口方法解析，在父借口递归查找
初始化：static()
有必要提一点的是：准备和初始化
准备
    准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：

    1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。
    2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。
   假设一个类变量的定义为：
　　public static int value = 3；
    那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器<clinit>（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。
详细查看：【深入Java虚拟机】之四：类加载机制 http://blog.csdn.net/ns_code/article/details/17881581